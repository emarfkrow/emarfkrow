・基となるスキーマが存在する

・スキーマから関係・多重度を評価し、Entityを生成。
（ここで、VO：getter、DTO：VO+setter、DAO：DBIO処理、Entity：DTO+DAO）

・Entityにはカスタマイズは不要。アーカイブにしてしまっても構わない。

・[proj]-com        ：job/webの共通処理。Entityが入る。DataSource・Transaction・Repository・Exception・FormValidation・ServiceIF・各種Util。
・[proj]-job-base   ：バッチ処理の共通処理。バッチのBaseClass。
・[proj]-job[-BatID]：各種バッチモジュール。必要に応じて「job-base」をオーバライド。
・[proj]-web-base   ：オンラインの共通処理。認証・認可。
・[proj]-web        ：オンラインモジュール。必要に応じて「web-base」をオーバライド。

・com系３つのモジュールをIDEのプラグインで出力する。
・バッチ処理・オンラインの共通処理はフレームワークに依存しない実装にする
・カスタマイズが必要なら各モジュールでオーバライドする

・まず、出来上がりの姿を見極めるため、com系３つのプロジェクトを手組みする。
・exam-com
・exam-job-base
・exam-web-base

15:11:28.299 [main] DEBUG com.example.job.TEntityJob - com.example.entity.TEntity@527740a2

emaef-com
emarf-job
exam-com
exam-job



■eclipseの設定変更
[一般]
	[エディター]
		■[エディターを自動的に閉じる]のチェックを外す
		[AnyEdit ツール]
			自動変換タブ
				■[末尾の空白の除去]にチェック
[Java]
	[コード・スタイル]
		[フォーマッター]
			（アクティブなプロファイルを「編集」）
				[インデント]
					■タブポリシーに「スペースのみ」を選択
[Web]
	[HTMLファイル]
		[エディター]
			■行の幅に「999」
			■「スペースをを使用したインデント」を選択
			■インデントサイズに「2」



アプリケーションエラー		AppError
システムエラー				SysError
i18n						MessageResolver
リソースのUTF8対応			UTF8Control
アプリケーションプロパティ	App
コネクションプール管理		Connections、ThreadLocalConection
データソース管理			DataSources
データソースの方言拡張		DataSourcesAssist
SQL実行						Queries
時間管理					LocalDateTime
ロケール管理				Locales、ThreadLocalLocale
MapのListの略称				MapList
メッセージ管理				Messages
文字列操作					StringUtil
バリデーション				FormValidator、IForm

バッチ親クラス				BaseJob

オンライン親クラス			BaseAction
参照代表クラス				ReferAction

Ajax通信					AjaxServlet
Form送信					FormServlet
thymeleaf制御				HtmlServlet
Json取得					JsonServlet
ログイン認証				LoginFilter

【exam-com】Entity
【exam-job】バッチクラス
【exam-web】アクションクラス・フォームクラス

■主キー
	・数値：自動採番
	・固定長：自動採番・「0」埋め
	・可変長：必須入力
	※外部キーなら参照モデル

■モデル検討
１．親子パターン：「Aの主キー＋１キー」がBの主キーである															：Aが「親モデル」・Bが「子モデル」
	１−１．子なしパターン
	１−２．親なしパターン
２．兄弟パターン：AとBの主キーが一致する																			：A・Bともに「兄弟モデル」
	２−１．長男パターン：兄弟でも、弟にならない
	２−２．代表パターン：兄弟のうち唯一、弟モデルを持つ
	２−３．末弟パターン：兄弟でも、弟を持たない
３．履歴パターン：「Aの主キー＋１キー」がBの主キーであり、Bのテーブル名がAに前方一致し、主キー以外の全てが一致する	：Bが「履歴モデル」
４．参照パターン：Aが「単一キーかつ名称あり」で、Bの主キー以外にその単一キーが存在する								：Aが「参照先モデル」Bが「参照元モデル」
５．転生パターン：Aの主キーが、Bのみ主キー以外に存在し、必須である													：Aが「転生元モデル」Bが「転生先モデル」
６．派生パターン：Aの主キーが、B/Cの主キー以外に存在し、必須である													：Aが「派生元モデル」B/Cが「派生先モデル」
７．集約パターン：Aの主キーが、Bの主キー以外に存在し、必須でない													：Aが「集約先モデル」Bが「集約元モデル」
８．複合パターン：Cの「適用日」以外の複合キーが、参照モデルAの単一キーと参照モデルBの単一キーである					：Aは「参照モデル」  Bは「制約モデル」Cは「複合モデル」
９．変換パターン：Aの情報を基に、Bの情報をVIEWで実現する															：Aは「変換元モデル」Bは「変換先モデル」

■適用日の主キー化
・同一キーでも期間により状態が変わるもの
・有効期間が複数発生しないもの（唯一の死活期間となるもの）は主キー化しない

